service: team4-sls-split


constructs:
  load:
    type: queue
    worker:
      vpc:
        securityGroupIds:
          - sg-0afcfd2a983b80407
        subnetIds:
          - subnet-0f0145739a0011749
          - subnet-0b5a9c546fd7ca400
          - subnet-026cbc956a6cc5592
      package:
        patterns:
          - "!extract/**"
          - "!deploy.sh"
          - "!requirements.txt"
          - "!node_modules"
          - "!package.json"
          - "!package-lock.json"
          - "!README.md"
          - "!.github/**"
          - "!.serverless"
      timeout: 600
      reservedConcurrency: 1
      role: arn:aws:iam::351115496094:role/data-project-lambda-role
      handler: loader.handle
      layers:
        - Ref: PythonRequirementsLambdaLayer
      memorySize: 10240



plugins:
  - serverless-python-requirements
  - serverless-lift
custom:
  pythonRequirements:
    slim: true
    layer: true
    dockerizePip: true
    # zip: true

  # functionsBasePath: src


provider:
  iam:  
    role:
      permissionsBoundary: arn:aws:iam::351115496094:policy/ScopePermissions
      # statements:
      #   - Effect: Allow
      #     Action: ["s3:PutObject", "s3:GetObject", "s3:DeleteObject", "s3:ListBucket", "sqs:ReceiveMessage", "sqs:SendMessage", "sqs:GetQueueUrl", "sqs:CreateQueue", "sqs:ListQueues"]
      #     Resource:
      #       - arn:aws:iam::351115496094:role/data-project-lambda-role

  region: eu-west-1
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  timeout: 300

  # iamRoleStatements:
  #   - Effect: 'Allow'
  #     Action:
  #       - s3:GetObject
  #       - s3:ListBucket
  #     Resource:
  #       - arn:aws:iam::351115496094:role/data-project-lambda-role

  # stage: dev

package:
  individually: true
  # patterns:
    # - "!*"
    # - "!*/**"
  excludeDevDependencies: true


functions:
  extract:
    handler: extract/extract.handle
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 300
    role: arn:aws:iam::351115496094:role/data-project-lambda-role
    events:
      - s3:
          bucket: delon3-team-4-bucket
          event: 
            - s3:ObjectCreated:*
          rules:
            - suffix: .csv
          existing: true
    environment:
      QUEUE_URL: ${construct:load.queueUrl}
    package:
      patterns:
        - "!*"
        - "!*/**"
        - "extract/extract.py"
  # load:
  #   vpc:
  #     securityGroupIds:
  #       - sg-0afcfd2a983b80407
  #     subnetIds:
  #       - subnet-0f0145739a0011749
  #       - subnet-0b5a9c546fd7ca400
  #       - subnet-026cbc956a6cc5592
  #   handler: src/load/load.handle
  #   package:
  #     include:
  #       - src/load/**
  #   timeout: 300
  #   reservedConcurrency: 1
  #   role: arn:aws:iam::351115496094:role/data-project-lambda-role
  #   # events:
  #     # - sqs:
  #     #     arn:
  #     #       Fn::GetAtt:
  #     #         - MyQueue
  #     #         - Arn

    
  
# resources:
#   Resources:
#     IamRoleCustomResourcesLambdaExecution:
#       Type: AWS::IAM::Role
#       Properties:
#         PermissionsBoundary: arn:aws:iam::351115496094:policy/ScopePermissions
    
    # MyQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties: