service: team4-sls


plugins:
  - serverless-python-requirements
  # - serverless-functions-base-path

custom:
  pythonRequirements:
    slim: true
    layer: true
    dockerizePip: true
    # zip: true
    # dockerImage: python:latest

  # functionsBasePath: src


provider:
  iam:  
    role:
      permissionsBoundary: arn:aws:iam::351115496094:policy/ScopePermissions

  region: eu-west-1
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  timeout: 300

  # iamRoleStatements:
  #   - Effect: 'Allow'
  #     Action:
  #       - s3:GetObject
  #       - s3:ListBucket
  #     Resource:
  #       - arn:aws:iam::351115496094:role/data-project-lambda-role

  # stage: dev

package:
  # individually: true
  include: 
    - src/team4lambda/**
    - app.py
    - etl.py
    - conn.py
  exclude:
    - "*"
    - "*/**"
  # excludeDevDependencies: false


functions:
  extract:
    vpc:
      securityGroupIds:
        - sg-0afcfd2a983b80407
      subnetIds:
        - subnet-0f0145739a0011749
        - subnet-0b5a9c546fd7ca400
        - subnet-026cbc956a6cc5592
    handler: app.handle
    # package:
    #   include:
    #     - src/team4lambda/**
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 300
    role: arn:aws:iam::351115496094:role/data-project-lambda-role
    events:
      - s3:
          bucket: delon3-team-4-bucket
          event: 
            - s3:ObjectCreated:*
          rules:
            - suffix: .csv
          existing: true
  
    
  
resources:
  Resources:
    IamRoleCustomResourcesLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        PermissionsBoundary: arn:aws:iam::351115496094:policy/ScopePermissions